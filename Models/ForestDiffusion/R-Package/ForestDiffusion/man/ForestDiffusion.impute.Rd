% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ForestDiffusion.R
\name{ForestDiffusion.impute}
\alias{ForestDiffusion.impute}
\title{Impute missing data with a trained ForestDiffusion model}
\usage{
ForestDiffusion.impute(
  object,
  k = 1,
  X = NULL,
  label_y = NULL,
  repaint = FALSE,
  r = 5,
  j = 0.1,
  n_t = NULL,
  seed = NULL
)
}
\arguments{
\item{object}{a ForestDiffusion object}

\item{k}{number of imputations}

\item{X}{(optional) data.frame of the dataset to be imputed; If not provided, the training dataset will be imputed instead}

\item{label_y}{(optional) vector containing the outcome variable if it is categorical for improved performance by training separate models per class; cannot contain missing values; if not provided, the training label_y will be used if it exists.}

\item{repaint}{If TRUE, it will impute using the REPAINT technique for improved performance}

\item{r}{number of repaints (default=10)}

\item{j}{jump size in percentage (default: 10 percent of the samples), this is part of REPAINT}

\item{n_t}{(optional) number of noise levels (and sampling steps); increase for higher performance, but slows down training and sampling; if not provided, will use the same n_t as used in training.}

\item{seed}{(optional) random seed used}
}
\value{
Returns a data.frame with the generated data
}
\description{
Impute missing data by solving the reverse SDE while keeping the non-missing data intact.
}
\examples{
 \dontrun{
 data(iris)
 X = data.frame(iris[,1:4])
 y = iris[,5]
 
 ## Imputation
 
 # add missing data
 Xy = missForest::prodNA(Xy, noNA = 0.2)
 
 nimp = 5 # number of imputations needed
 Xy = X
 Xy$y = y
 forest_model = ForestDiffusion(X=Xy, n_cores=1, n_t=50, duplicate_K=50, flow=FALSE)
 # regular (fast)
 Xy_fake = ForestDiffusion.impute(forest_model, k=nimp)
 # REPAINT (slow, but better)
 Xy_fake = ForestDiffusion.impute(forest_model, repaint=TRUE, r=10, j=5, k=nimp)
}

}
\references{
Alexia Jolicoeur-Martineau, Kilian Fatras, Tal Kachman. 
Generating and Imputing Tabular Data via Diffusion and Flow-based Gradient-Boosted Trees. 
arXiv:2309.09968.

Andreas Lugmayr, Martin Danelljan, Andres Romero, Fisher Yu, Radu Timofte, Luc Van Gool. 
RePaint: Inpainting using Denoising Diffusion Probabilistic Models. 
arXiv:2201.09865.
}
